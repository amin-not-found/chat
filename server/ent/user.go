// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"server/ent/user"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// PasswordHash holds the value of the "password_hash" field.
	PasswordHash string `json:"password_hash,omitempty"`
	// Bio holds the value of the "bio" field.
	Bio *string `json:"bio,omitempty"`
	// LastSeen holds the value of the "last_seen" field.
	LastSeen *time.Time `json:"last_seen,omitempty"`
	// RefreshTokenExpiry holds the value of the "refresh_token_expiry" field.
	RefreshTokenExpiry *int64 `json:"refresh_token_expiry,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges UserEdges `json:"edges"`
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// UnrecivedMessages holds the value of the unrecived_messages edge.
	UnrecivedMessages []*Message `json:"unrecived_messages,omitempty"`
	// UndeliveredMessages holds the value of the undelivered_messages edge.
	UndeliveredMessages []*Message `json:"undelivered_messages,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UnrecivedMessagesOrErr returns the UnrecivedMessages value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UnrecivedMessagesOrErr() ([]*Message, error) {
	if e.loadedTypes[0] {
		return e.UnrecivedMessages, nil
	}
	return nil, &NotLoadedError{edge: "unrecived_messages"}
}

// UndeliveredMessagesOrErr returns the UndeliveredMessages value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UndeliveredMessagesOrErr() ([]*Message, error) {
	if e.loadedTypes[1] {
		return e.UndeliveredMessages, nil
	}
	return nil, &NotLoadedError{edge: "undelivered_messages"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID, user.FieldRefreshTokenExpiry:
			values[i] = new(sql.NullInt64)
		case user.FieldUsername, user.FieldName, user.FieldPasswordHash, user.FieldBio:
			values[i] = new(sql.NullString)
		case user.FieldLastSeen:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				u.Username = value.String
			}
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case user.FieldPasswordHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password_hash", values[i])
			} else if value.Valid {
				u.PasswordHash = value.String
			}
		case user.FieldBio:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bio", values[i])
			} else if value.Valid {
				u.Bio = new(string)
				*u.Bio = value.String
			}
		case user.FieldLastSeen:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_seen", values[i])
			} else if value.Valid {
				u.LastSeen = new(time.Time)
				*u.LastSeen = value.Time
			}
		case user.FieldRefreshTokenExpiry:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field refresh_token_expiry", values[i])
			} else if value.Valid {
				u.RefreshTokenExpiry = new(int64)
				*u.RefreshTokenExpiry = value.Int64
			}
		}
	}
	return nil
}

// QueryUnrecivedMessages queries the "unrecived_messages" edge of the User entity.
func (u *User) QueryUnrecivedMessages() *MessageQuery {
	return (&UserClient{config: u.config}).QueryUnrecivedMessages(u)
}

// QueryUndeliveredMessages queries the "undelivered_messages" edge of the User entity.
func (u *User) QueryUndeliveredMessages() *MessageQuery {
	return (&UserClient{config: u.config}).QueryUndeliveredMessages(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", username=")
	builder.WriteString(u.Username)
	builder.WriteString(", name=")
	builder.WriteString(u.Name)
	builder.WriteString(", password_hash=")
	builder.WriteString(u.PasswordHash)
	if v := u.Bio; v != nil {
		builder.WriteString(", bio=")
		builder.WriteString(*v)
	}
	if v := u.LastSeen; v != nil {
		builder.WriteString(", last_seen=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := u.RefreshTokenExpiry; v != nil {
		builder.WriteString(", refresh_token_expiry=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
