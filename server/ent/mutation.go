// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"server/ent/message"
	"server/ent/predicate"
	"server/ent/user"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeMessage = "Message"
	TypeUser    = "User"
)

// MessageMutation represents an operation that mutates the Message nodes in the graph.
type MessageMutation struct {
	config
	op               Op
	typ              string
	id               *int
	_type            *string
	content          *string
	time             *time.Time
	local_id         *int64
	addlocal_id      *int64
	can_be_deleted   *bool
	clearedFields    map[string]struct{}
	receivers        map[int]struct{}
	removedreceivers map[int]struct{}
	clearedreceivers bool
	sender           *int
	clearedsender    bool
	done             bool
	oldValue         func(context.Context) (*Message, error)
	predicates       []predicate.Message
}

var _ ent.Mutation = (*MessageMutation)(nil)

// messageOption allows management of the mutation configuration using functional options.
type messageOption func(*MessageMutation)

// newMessageMutation creates new mutation for the Message entity.
func newMessageMutation(c config, op Op, opts ...messageOption) *MessageMutation {
	m := &MessageMutation{
		config:        c,
		op:            op,
		typ:           TypeMessage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMessageID sets the ID field of the mutation.
func withMessageID(id int) messageOption {
	return func(m *MessageMutation) {
		var (
			err   error
			once  sync.Once
			value *Message
		)
		m.oldValue = func(ctx context.Context) (*Message, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Message.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMessage sets the old Message of the mutation.
func withMessage(node *Message) messageOption {
	return func(m *MessageMutation) {
		m.oldValue = func(context.Context) (*Message, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MessageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MessageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MessageMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetType sets the "type" field.
func (m *MessageMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *MessageMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *MessageMutation) ResetType() {
	m._type = nil
}

// SetContent sets the "content" field.
func (m *MessageMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *MessageMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *MessageMutation) ResetContent() {
	m.content = nil
}

// SetTime sets the "time" field.
func (m *MessageMutation) SetTime(t time.Time) {
	m.time = &t
}

// Time returns the value of the "time" field in the mutation.
func (m *MessageMutation) Time() (r time.Time, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "time" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// ResetTime resets all changes to the "time" field.
func (m *MessageMutation) ResetTime() {
	m.time = nil
}

// SetLocalID sets the "local_id" field.
func (m *MessageMutation) SetLocalID(i int64) {
	m.local_id = &i
	m.addlocal_id = nil
}

// LocalID returns the value of the "local_id" field in the mutation.
func (m *MessageMutation) LocalID() (r int64, exists bool) {
	v := m.local_id
	if v == nil {
		return
	}
	return *v, true
}

// OldLocalID returns the old "local_id" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldLocalID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLocalID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLocalID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocalID: %w", err)
	}
	return oldValue.LocalID, nil
}

// AddLocalID adds i to the "local_id" field.
func (m *MessageMutation) AddLocalID(i int64) {
	if m.addlocal_id != nil {
		*m.addlocal_id += i
	} else {
		m.addlocal_id = &i
	}
}

// AddedLocalID returns the value that was added to the "local_id" field in this mutation.
func (m *MessageMutation) AddedLocalID() (r int64, exists bool) {
	v := m.addlocal_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetLocalID resets all changes to the "local_id" field.
func (m *MessageMutation) ResetLocalID() {
	m.local_id = nil
	m.addlocal_id = nil
}

// SetCanBeDeleted sets the "can_be_deleted" field.
func (m *MessageMutation) SetCanBeDeleted(b bool) {
	m.can_be_deleted = &b
}

// CanBeDeleted returns the value of the "can_be_deleted" field in the mutation.
func (m *MessageMutation) CanBeDeleted() (r bool, exists bool) {
	v := m.can_be_deleted
	if v == nil {
		return
	}
	return *v, true
}

// OldCanBeDeleted returns the old "can_be_deleted" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldCanBeDeleted(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCanBeDeleted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCanBeDeleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCanBeDeleted: %w", err)
	}
	return oldValue.CanBeDeleted, nil
}

// ResetCanBeDeleted resets all changes to the "can_be_deleted" field.
func (m *MessageMutation) ResetCanBeDeleted() {
	m.can_be_deleted = nil
}

// AddReceiverIDs adds the "receivers" edge to the User entity by ids.
func (m *MessageMutation) AddReceiverIDs(ids ...int) {
	if m.receivers == nil {
		m.receivers = make(map[int]struct{})
	}
	for i := range ids {
		m.receivers[ids[i]] = struct{}{}
	}
}

// ClearReceivers clears the "receivers" edge to the User entity.
func (m *MessageMutation) ClearReceivers() {
	m.clearedreceivers = true
}

// ReceiversCleared reports if the "receivers" edge to the User entity was cleared.
func (m *MessageMutation) ReceiversCleared() bool {
	return m.clearedreceivers
}

// RemoveReceiverIDs removes the "receivers" edge to the User entity by IDs.
func (m *MessageMutation) RemoveReceiverIDs(ids ...int) {
	if m.removedreceivers == nil {
		m.removedreceivers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.receivers, ids[i])
		m.removedreceivers[ids[i]] = struct{}{}
	}
}

// RemovedReceivers returns the removed IDs of the "receivers" edge to the User entity.
func (m *MessageMutation) RemovedReceiversIDs() (ids []int) {
	for id := range m.removedreceivers {
		ids = append(ids, id)
	}
	return
}

// ReceiversIDs returns the "receivers" edge IDs in the mutation.
func (m *MessageMutation) ReceiversIDs() (ids []int) {
	for id := range m.receivers {
		ids = append(ids, id)
	}
	return
}

// ResetReceivers resets all changes to the "receivers" edge.
func (m *MessageMutation) ResetReceivers() {
	m.receivers = nil
	m.clearedreceivers = false
	m.removedreceivers = nil
}

// SetSenderID sets the "sender" edge to the User entity by id.
func (m *MessageMutation) SetSenderID(id int) {
	m.sender = &id
}

// ClearSender clears the "sender" edge to the User entity.
func (m *MessageMutation) ClearSender() {
	m.clearedsender = true
}

// SenderCleared reports if the "sender" edge to the User entity was cleared.
func (m *MessageMutation) SenderCleared() bool {
	return m.clearedsender
}

// SenderID returns the "sender" edge ID in the mutation.
func (m *MessageMutation) SenderID() (id int, exists bool) {
	if m.sender != nil {
		return *m.sender, true
	}
	return
}

// SenderIDs returns the "sender" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SenderID instead. It exists only for internal usage by the builders.
func (m *MessageMutation) SenderIDs() (ids []int) {
	if id := m.sender; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSender resets all changes to the "sender" edge.
func (m *MessageMutation) ResetSender() {
	m.sender = nil
	m.clearedsender = false
}

// Where appends a list predicates to the MessageMutation builder.
func (m *MessageMutation) Where(ps ...predicate.Message) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *MessageMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Message).
func (m *MessageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MessageMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m._type != nil {
		fields = append(fields, message.FieldType)
	}
	if m.content != nil {
		fields = append(fields, message.FieldContent)
	}
	if m.time != nil {
		fields = append(fields, message.FieldTime)
	}
	if m.local_id != nil {
		fields = append(fields, message.FieldLocalID)
	}
	if m.can_be_deleted != nil {
		fields = append(fields, message.FieldCanBeDeleted)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MessageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case message.FieldType:
		return m.GetType()
	case message.FieldContent:
		return m.Content()
	case message.FieldTime:
		return m.Time()
	case message.FieldLocalID:
		return m.LocalID()
	case message.FieldCanBeDeleted:
		return m.CanBeDeleted()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MessageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case message.FieldType:
		return m.OldType(ctx)
	case message.FieldContent:
		return m.OldContent(ctx)
	case message.FieldTime:
		return m.OldTime(ctx)
	case message.FieldLocalID:
		return m.OldLocalID(ctx)
	case message.FieldCanBeDeleted:
		return m.OldCanBeDeleted(ctx)
	}
	return nil, fmt.Errorf("unknown Message field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case message.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case message.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case message.FieldTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	case message.FieldLocalID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocalID(v)
		return nil
	case message.FieldCanBeDeleted:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCanBeDeleted(v)
		return nil
	}
	return fmt.Errorf("unknown Message field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MessageMutation) AddedFields() []string {
	var fields []string
	if m.addlocal_id != nil {
		fields = append(fields, message.FieldLocalID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MessageMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case message.FieldLocalID:
		return m.AddedLocalID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageMutation) AddField(name string, value ent.Value) error {
	switch name {
	case message.FieldLocalID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLocalID(v)
		return nil
	}
	return fmt.Errorf("unknown Message numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MessageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MessageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MessageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Message nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MessageMutation) ResetField(name string) error {
	switch name {
	case message.FieldType:
		m.ResetType()
		return nil
	case message.FieldContent:
		m.ResetContent()
		return nil
	case message.FieldTime:
		m.ResetTime()
		return nil
	case message.FieldLocalID:
		m.ResetLocalID()
		return nil
	case message.FieldCanBeDeleted:
		m.ResetCanBeDeleted()
		return nil
	}
	return fmt.Errorf("unknown Message field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MessageMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.receivers != nil {
		edges = append(edges, message.EdgeReceivers)
	}
	if m.sender != nil {
		edges = append(edges, message.EdgeSender)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MessageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case message.EdgeReceivers:
		ids := make([]ent.Value, 0, len(m.receivers))
		for id := range m.receivers {
			ids = append(ids, id)
		}
		return ids
	case message.EdgeSender:
		if id := m.sender; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MessageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedreceivers != nil {
		edges = append(edges, message.EdgeReceivers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MessageMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case message.EdgeReceivers:
		ids := make([]ent.Value, 0, len(m.removedreceivers))
		for id := range m.removedreceivers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MessageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedreceivers {
		edges = append(edges, message.EdgeReceivers)
	}
	if m.clearedsender {
		edges = append(edges, message.EdgeSender)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MessageMutation) EdgeCleared(name string) bool {
	switch name {
	case message.EdgeReceivers:
		return m.clearedreceivers
	case message.EdgeSender:
		return m.clearedsender
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MessageMutation) ClearEdge(name string) error {
	switch name {
	case message.EdgeSender:
		m.ClearSender()
		return nil
	}
	return fmt.Errorf("unknown Message unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MessageMutation) ResetEdge(name string) error {
	switch name {
	case message.EdgeReceivers:
		m.ResetReceivers()
		return nil
	case message.EdgeSender:
		m.ResetSender()
		return nil
	}
	return fmt.Errorf("unknown Message edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                          Op
	typ                         string
	id                          *int
	username                    *string
	name                        *string
	password_hash               *string
	bio                         *string
	last_seen                   *time.Time
	refresh_token_expiry        *int64
	addrefresh_token_expiry     *int64
	clearedFields               map[string]struct{}
	unrecived_messages          map[int]struct{}
	removedunrecived_messages   map[int]struct{}
	clearedunrecived_messages   bool
	undelivered_messages        map[int]struct{}
	removedundelivered_messages map[int]struct{}
	clearedundelivered_messages bool
	done                        bool
	oldValue                    func(context.Context) (*User, error)
	predicates                  []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetPasswordHash sets the "password_hash" field.
func (m *UserMutation) SetPasswordHash(s string) {
	m.password_hash = &s
}

// PasswordHash returns the value of the "password_hash" field in the mutation.
func (m *UserMutation) PasswordHash() (r string, exists bool) {
	v := m.password_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldPasswordHash returns the old "password_hash" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPasswordHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPasswordHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPasswordHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPasswordHash: %w", err)
	}
	return oldValue.PasswordHash, nil
}

// ResetPasswordHash resets all changes to the "password_hash" field.
func (m *UserMutation) ResetPasswordHash() {
	m.password_hash = nil
}

// SetBio sets the "bio" field.
func (m *UserMutation) SetBio(s string) {
	m.bio = &s
}

// Bio returns the value of the "bio" field in the mutation.
func (m *UserMutation) Bio() (r string, exists bool) {
	v := m.bio
	if v == nil {
		return
	}
	return *v, true
}

// OldBio returns the old "bio" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldBio(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBio is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBio requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBio: %w", err)
	}
	return oldValue.Bio, nil
}

// ClearBio clears the value of the "bio" field.
func (m *UserMutation) ClearBio() {
	m.bio = nil
	m.clearedFields[user.FieldBio] = struct{}{}
}

// BioCleared returns if the "bio" field was cleared in this mutation.
func (m *UserMutation) BioCleared() bool {
	_, ok := m.clearedFields[user.FieldBio]
	return ok
}

// ResetBio resets all changes to the "bio" field.
func (m *UserMutation) ResetBio() {
	m.bio = nil
	delete(m.clearedFields, user.FieldBio)
}

// SetLastSeen sets the "last_seen" field.
func (m *UserMutation) SetLastSeen(t time.Time) {
	m.last_seen = &t
}

// LastSeen returns the value of the "last_seen" field in the mutation.
func (m *UserMutation) LastSeen() (r time.Time, exists bool) {
	v := m.last_seen
	if v == nil {
		return
	}
	return *v, true
}

// OldLastSeen returns the old "last_seen" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastSeen(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLastSeen is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLastSeen requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastSeen: %w", err)
	}
	return oldValue.LastSeen, nil
}

// ClearLastSeen clears the value of the "last_seen" field.
func (m *UserMutation) ClearLastSeen() {
	m.last_seen = nil
	m.clearedFields[user.FieldLastSeen] = struct{}{}
}

// LastSeenCleared returns if the "last_seen" field was cleared in this mutation.
func (m *UserMutation) LastSeenCleared() bool {
	_, ok := m.clearedFields[user.FieldLastSeen]
	return ok
}

// ResetLastSeen resets all changes to the "last_seen" field.
func (m *UserMutation) ResetLastSeen() {
	m.last_seen = nil
	delete(m.clearedFields, user.FieldLastSeen)
}

// SetRefreshTokenExpiry sets the "refresh_token_expiry" field.
func (m *UserMutation) SetRefreshTokenExpiry(i int64) {
	m.refresh_token_expiry = &i
	m.addrefresh_token_expiry = nil
}

// RefreshTokenExpiry returns the value of the "refresh_token_expiry" field in the mutation.
func (m *UserMutation) RefreshTokenExpiry() (r int64, exists bool) {
	v := m.refresh_token_expiry
	if v == nil {
		return
	}
	return *v, true
}

// OldRefreshTokenExpiry returns the old "refresh_token_expiry" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRefreshTokenExpiry(ctx context.Context) (v *int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRefreshTokenExpiry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRefreshTokenExpiry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRefreshTokenExpiry: %w", err)
	}
	return oldValue.RefreshTokenExpiry, nil
}

// AddRefreshTokenExpiry adds i to the "refresh_token_expiry" field.
func (m *UserMutation) AddRefreshTokenExpiry(i int64) {
	if m.addrefresh_token_expiry != nil {
		*m.addrefresh_token_expiry += i
	} else {
		m.addrefresh_token_expiry = &i
	}
}

// AddedRefreshTokenExpiry returns the value that was added to the "refresh_token_expiry" field in this mutation.
func (m *UserMutation) AddedRefreshTokenExpiry() (r int64, exists bool) {
	v := m.addrefresh_token_expiry
	if v == nil {
		return
	}
	return *v, true
}

// ClearRefreshTokenExpiry clears the value of the "refresh_token_expiry" field.
func (m *UserMutation) ClearRefreshTokenExpiry() {
	m.refresh_token_expiry = nil
	m.addrefresh_token_expiry = nil
	m.clearedFields[user.FieldRefreshTokenExpiry] = struct{}{}
}

// RefreshTokenExpiryCleared returns if the "refresh_token_expiry" field was cleared in this mutation.
func (m *UserMutation) RefreshTokenExpiryCleared() bool {
	_, ok := m.clearedFields[user.FieldRefreshTokenExpiry]
	return ok
}

// ResetRefreshTokenExpiry resets all changes to the "refresh_token_expiry" field.
func (m *UserMutation) ResetRefreshTokenExpiry() {
	m.refresh_token_expiry = nil
	m.addrefresh_token_expiry = nil
	delete(m.clearedFields, user.FieldRefreshTokenExpiry)
}

// AddUnrecivedMessageIDs adds the "unrecived_messages" edge to the Message entity by ids.
func (m *UserMutation) AddUnrecivedMessageIDs(ids ...int) {
	if m.unrecived_messages == nil {
		m.unrecived_messages = make(map[int]struct{})
	}
	for i := range ids {
		m.unrecived_messages[ids[i]] = struct{}{}
	}
}

// ClearUnrecivedMessages clears the "unrecived_messages" edge to the Message entity.
func (m *UserMutation) ClearUnrecivedMessages() {
	m.clearedunrecived_messages = true
}

// UnrecivedMessagesCleared reports if the "unrecived_messages" edge to the Message entity was cleared.
func (m *UserMutation) UnrecivedMessagesCleared() bool {
	return m.clearedunrecived_messages
}

// RemoveUnrecivedMessageIDs removes the "unrecived_messages" edge to the Message entity by IDs.
func (m *UserMutation) RemoveUnrecivedMessageIDs(ids ...int) {
	if m.removedunrecived_messages == nil {
		m.removedunrecived_messages = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.unrecived_messages, ids[i])
		m.removedunrecived_messages[ids[i]] = struct{}{}
	}
}

// RemovedUnrecivedMessages returns the removed IDs of the "unrecived_messages" edge to the Message entity.
func (m *UserMutation) RemovedUnrecivedMessagesIDs() (ids []int) {
	for id := range m.removedunrecived_messages {
		ids = append(ids, id)
	}
	return
}

// UnrecivedMessagesIDs returns the "unrecived_messages" edge IDs in the mutation.
func (m *UserMutation) UnrecivedMessagesIDs() (ids []int) {
	for id := range m.unrecived_messages {
		ids = append(ids, id)
	}
	return
}

// ResetUnrecivedMessages resets all changes to the "unrecived_messages" edge.
func (m *UserMutation) ResetUnrecivedMessages() {
	m.unrecived_messages = nil
	m.clearedunrecived_messages = false
	m.removedunrecived_messages = nil
}

// AddUndeliveredMessageIDs adds the "undelivered_messages" edge to the Message entity by ids.
func (m *UserMutation) AddUndeliveredMessageIDs(ids ...int) {
	if m.undelivered_messages == nil {
		m.undelivered_messages = make(map[int]struct{})
	}
	for i := range ids {
		m.undelivered_messages[ids[i]] = struct{}{}
	}
}

// ClearUndeliveredMessages clears the "undelivered_messages" edge to the Message entity.
func (m *UserMutation) ClearUndeliveredMessages() {
	m.clearedundelivered_messages = true
}

// UndeliveredMessagesCleared reports if the "undelivered_messages" edge to the Message entity was cleared.
func (m *UserMutation) UndeliveredMessagesCleared() bool {
	return m.clearedundelivered_messages
}

// RemoveUndeliveredMessageIDs removes the "undelivered_messages" edge to the Message entity by IDs.
func (m *UserMutation) RemoveUndeliveredMessageIDs(ids ...int) {
	if m.removedundelivered_messages == nil {
		m.removedundelivered_messages = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.undelivered_messages, ids[i])
		m.removedundelivered_messages[ids[i]] = struct{}{}
	}
}

// RemovedUndeliveredMessages returns the removed IDs of the "undelivered_messages" edge to the Message entity.
func (m *UserMutation) RemovedUndeliveredMessagesIDs() (ids []int) {
	for id := range m.removedundelivered_messages {
		ids = append(ids, id)
	}
	return
}

// UndeliveredMessagesIDs returns the "undelivered_messages" edge IDs in the mutation.
func (m *UserMutation) UndeliveredMessagesIDs() (ids []int) {
	for id := range m.undelivered_messages {
		ids = append(ids, id)
	}
	return
}

// ResetUndeliveredMessages resets all changes to the "undelivered_messages" edge.
func (m *UserMutation) ResetUndeliveredMessages() {
	m.undelivered_messages = nil
	m.clearedundelivered_messages = false
	m.removedundelivered_messages = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.password_hash != nil {
		fields = append(fields, user.FieldPasswordHash)
	}
	if m.bio != nil {
		fields = append(fields, user.FieldBio)
	}
	if m.last_seen != nil {
		fields = append(fields, user.FieldLastSeen)
	}
	if m.refresh_token_expiry != nil {
		fields = append(fields, user.FieldRefreshTokenExpiry)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldName:
		return m.Name()
	case user.FieldPasswordHash:
		return m.PasswordHash()
	case user.FieldBio:
		return m.Bio()
	case user.FieldLastSeen:
		return m.LastSeen()
	case user.FieldRefreshTokenExpiry:
		return m.RefreshTokenExpiry()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldPasswordHash:
		return m.OldPasswordHash(ctx)
	case user.FieldBio:
		return m.OldBio(ctx)
	case user.FieldLastSeen:
		return m.OldLastSeen(ctx)
	case user.FieldRefreshTokenExpiry:
		return m.OldRefreshTokenExpiry(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldPasswordHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPasswordHash(v)
		return nil
	case user.FieldBio:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBio(v)
		return nil
	case user.FieldLastSeen:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastSeen(v)
		return nil
	case user.FieldRefreshTokenExpiry:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRefreshTokenExpiry(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addrefresh_token_expiry != nil {
		fields = append(fields, user.FieldRefreshTokenExpiry)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldRefreshTokenExpiry:
		return m.AddedRefreshTokenExpiry()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldRefreshTokenExpiry:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRefreshTokenExpiry(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldBio) {
		fields = append(fields, user.FieldBio)
	}
	if m.FieldCleared(user.FieldLastSeen) {
		fields = append(fields, user.FieldLastSeen)
	}
	if m.FieldCleared(user.FieldRefreshTokenExpiry) {
		fields = append(fields, user.FieldRefreshTokenExpiry)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldBio:
		m.ClearBio()
		return nil
	case user.FieldLastSeen:
		m.ClearLastSeen()
		return nil
	case user.FieldRefreshTokenExpiry:
		m.ClearRefreshTokenExpiry()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldPasswordHash:
		m.ResetPasswordHash()
		return nil
	case user.FieldBio:
		m.ResetBio()
		return nil
	case user.FieldLastSeen:
		m.ResetLastSeen()
		return nil
	case user.FieldRefreshTokenExpiry:
		m.ResetRefreshTokenExpiry()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.unrecived_messages != nil {
		edges = append(edges, user.EdgeUnrecivedMessages)
	}
	if m.undelivered_messages != nil {
		edges = append(edges, user.EdgeUndeliveredMessages)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeUnrecivedMessages:
		ids := make([]ent.Value, 0, len(m.unrecived_messages))
		for id := range m.unrecived_messages {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeUndeliveredMessages:
		ids := make([]ent.Value, 0, len(m.undelivered_messages))
		for id := range m.undelivered_messages {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedunrecived_messages != nil {
		edges = append(edges, user.EdgeUnrecivedMessages)
	}
	if m.removedundelivered_messages != nil {
		edges = append(edges, user.EdgeUndeliveredMessages)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeUnrecivedMessages:
		ids := make([]ent.Value, 0, len(m.removedunrecived_messages))
		for id := range m.removedunrecived_messages {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeUndeliveredMessages:
		ids := make([]ent.Value, 0, len(m.removedundelivered_messages))
		for id := range m.removedundelivered_messages {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedunrecived_messages {
		edges = append(edges, user.EdgeUnrecivedMessages)
	}
	if m.clearedundelivered_messages {
		edges = append(edges, user.EdgeUndeliveredMessages)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeUnrecivedMessages:
		return m.clearedunrecived_messages
	case user.EdgeUndeliveredMessages:
		return m.clearedundelivered_messages
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeUnrecivedMessages:
		m.ResetUnrecivedMessages()
		return nil
	case user.EdgeUndeliveredMessages:
		m.ResetUndeliveredMessages()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
