// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"server/ent/message"
	"server/ent/predicate"
	"server/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUsername sets the "username" field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.mutation.SetUsername(s)
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetPasswordHash sets the "password_hash" field.
func (uu *UserUpdate) SetPasswordHash(s string) *UserUpdate {
	uu.mutation.SetPasswordHash(s)
	return uu
}

// SetBio sets the "bio" field.
func (uu *UserUpdate) SetBio(s string) *UserUpdate {
	uu.mutation.SetBio(s)
	return uu
}

// SetNillableBio sets the "bio" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBio(s *string) *UserUpdate {
	if s != nil {
		uu.SetBio(*s)
	}
	return uu
}

// ClearBio clears the value of the "bio" field.
func (uu *UserUpdate) ClearBio() *UserUpdate {
	uu.mutation.ClearBio()
	return uu
}

// SetLastSeen sets the "last_seen" field.
func (uu *UserUpdate) SetLastSeen(t time.Time) *UserUpdate {
	uu.mutation.SetLastSeen(t)
	return uu
}

// SetNillableLastSeen sets the "last_seen" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastSeen(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetLastSeen(*t)
	}
	return uu
}

// ClearLastSeen clears the value of the "last_seen" field.
func (uu *UserUpdate) ClearLastSeen() *UserUpdate {
	uu.mutation.ClearLastSeen()
	return uu
}

// SetRefreshTokenExpiry sets the "refresh_token_expiry" field.
func (uu *UserUpdate) SetRefreshTokenExpiry(i int64) *UserUpdate {
	uu.mutation.ResetRefreshTokenExpiry()
	uu.mutation.SetRefreshTokenExpiry(i)
	return uu
}

// SetNillableRefreshTokenExpiry sets the "refresh_token_expiry" field if the given value is not nil.
func (uu *UserUpdate) SetNillableRefreshTokenExpiry(i *int64) *UserUpdate {
	if i != nil {
		uu.SetRefreshTokenExpiry(*i)
	}
	return uu
}

// AddRefreshTokenExpiry adds i to the "refresh_token_expiry" field.
func (uu *UserUpdate) AddRefreshTokenExpiry(i int64) *UserUpdate {
	uu.mutation.AddRefreshTokenExpiry(i)
	return uu
}

// ClearRefreshTokenExpiry clears the value of the "refresh_token_expiry" field.
func (uu *UserUpdate) ClearRefreshTokenExpiry() *UserUpdate {
	uu.mutation.ClearRefreshTokenExpiry()
	return uu
}

// AddUnrecivedMessageIDs adds the "unrecived_messages" edge to the Message entity by IDs.
func (uu *UserUpdate) AddUnrecivedMessageIDs(ids ...int) *UserUpdate {
	uu.mutation.AddUnrecivedMessageIDs(ids...)
	return uu
}

// AddUnrecivedMessages adds the "unrecived_messages" edges to the Message entity.
func (uu *UserUpdate) AddUnrecivedMessages(m ...*Message) *UserUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.AddUnrecivedMessageIDs(ids...)
}

// AddUndeliveredMessageIDs adds the "undelivered_messages" edge to the Message entity by IDs.
func (uu *UserUpdate) AddUndeliveredMessageIDs(ids ...int) *UserUpdate {
	uu.mutation.AddUndeliveredMessageIDs(ids...)
	return uu
}

// AddUndeliveredMessages adds the "undelivered_messages" edges to the Message entity.
func (uu *UserUpdate) AddUndeliveredMessages(m ...*Message) *UserUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.AddUndeliveredMessageIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearUnrecivedMessages clears all "unrecived_messages" edges to the Message entity.
func (uu *UserUpdate) ClearUnrecivedMessages() *UserUpdate {
	uu.mutation.ClearUnrecivedMessages()
	return uu
}

// RemoveUnrecivedMessageIDs removes the "unrecived_messages" edge to Message entities by IDs.
func (uu *UserUpdate) RemoveUnrecivedMessageIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveUnrecivedMessageIDs(ids...)
	return uu
}

// RemoveUnrecivedMessages removes "unrecived_messages" edges to Message entities.
func (uu *UserUpdate) RemoveUnrecivedMessages(m ...*Message) *UserUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.RemoveUnrecivedMessageIDs(ids...)
}

// ClearUndeliveredMessages clears all "undelivered_messages" edges to the Message entity.
func (uu *UserUpdate) ClearUndeliveredMessages() *UserUpdate {
	uu.mutation.ClearUndeliveredMessages()
	return uu
}

// RemoveUndeliveredMessageIDs removes the "undelivered_messages" edge to Message entities by IDs.
func (uu *UserUpdate) RemoveUndeliveredMessageIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveUndeliveredMessageIDs(ids...)
	return uu
}

// RemoveUndeliveredMessages removes "undelivered_messages" edges to Message entities.
func (uu *UserUpdate) RemoveUndeliveredMessages(m ...*Message) *UserUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.RemoveUndeliveredMessageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(uu.hooks) == 0 {
		if err = uu.check(); err != nil {
			return 0, err
		}
		affected, err = uu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uu.check(); err != nil {
				return 0, err
			}
			uu.mutation = mutation
			affected, err = uu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uu.hooks) - 1; i >= 0; i-- {
			if uu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf("ent: validator failed for field \"username\": %w", err)}
		}
	}
	if v, ok := uu.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := uu.mutation.PasswordHash(); ok {
		if err := user.PasswordHashValidator(v); err != nil {
			return &ValidationError{Name: "password_hash", err: fmt.Errorf("ent: validator failed for field \"password_hash\": %w", err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldUsername,
		})
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldName,
		})
	}
	if value, ok := uu.mutation.PasswordHash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPasswordHash,
		})
	}
	if value, ok := uu.mutation.Bio(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldBio,
		})
	}
	if uu.mutation.BioCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldBio,
		})
	}
	if value, ok := uu.mutation.LastSeen(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldLastSeen,
		})
	}
	if uu.mutation.LastSeenCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: user.FieldLastSeen,
		})
	}
	if value, ok := uu.mutation.RefreshTokenExpiry(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldRefreshTokenExpiry,
		})
	}
	if value, ok := uu.mutation.AddedRefreshTokenExpiry(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldRefreshTokenExpiry,
		})
	}
	if uu.mutation.RefreshTokenExpiryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: user.FieldRefreshTokenExpiry,
		})
	}
	if uu.mutation.UnrecivedMessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.UnrecivedMessagesTable,
			Columns: user.UnrecivedMessagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUnrecivedMessagesIDs(); len(nodes) > 0 && !uu.mutation.UnrecivedMessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.UnrecivedMessagesTable,
			Columns: user.UnrecivedMessagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UnrecivedMessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.UnrecivedMessagesTable,
			Columns: user.UnrecivedMessagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UndeliveredMessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UndeliveredMessagesTable,
			Columns: []string{user.UndeliveredMessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUndeliveredMessagesIDs(); len(nodes) > 0 && !uu.mutation.UndeliveredMessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UndeliveredMessagesTable,
			Columns: []string{user.UndeliveredMessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UndeliveredMessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UndeliveredMessagesTable,
			Columns: []string{user.UndeliveredMessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUsername sets the "username" field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.mutation.SetUsername(s)
	return uuo
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetPasswordHash sets the "password_hash" field.
func (uuo *UserUpdateOne) SetPasswordHash(s string) *UserUpdateOne {
	uuo.mutation.SetPasswordHash(s)
	return uuo
}

// SetBio sets the "bio" field.
func (uuo *UserUpdateOne) SetBio(s string) *UserUpdateOne {
	uuo.mutation.SetBio(s)
	return uuo
}

// SetNillableBio sets the "bio" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBio(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetBio(*s)
	}
	return uuo
}

// ClearBio clears the value of the "bio" field.
func (uuo *UserUpdateOne) ClearBio() *UserUpdateOne {
	uuo.mutation.ClearBio()
	return uuo
}

// SetLastSeen sets the "last_seen" field.
func (uuo *UserUpdateOne) SetLastSeen(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLastSeen(t)
	return uuo
}

// SetNillableLastSeen sets the "last_seen" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastSeen(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetLastSeen(*t)
	}
	return uuo
}

// ClearLastSeen clears the value of the "last_seen" field.
func (uuo *UserUpdateOne) ClearLastSeen() *UserUpdateOne {
	uuo.mutation.ClearLastSeen()
	return uuo
}

// SetRefreshTokenExpiry sets the "refresh_token_expiry" field.
func (uuo *UserUpdateOne) SetRefreshTokenExpiry(i int64) *UserUpdateOne {
	uuo.mutation.ResetRefreshTokenExpiry()
	uuo.mutation.SetRefreshTokenExpiry(i)
	return uuo
}

// SetNillableRefreshTokenExpiry sets the "refresh_token_expiry" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRefreshTokenExpiry(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetRefreshTokenExpiry(*i)
	}
	return uuo
}

// AddRefreshTokenExpiry adds i to the "refresh_token_expiry" field.
func (uuo *UserUpdateOne) AddRefreshTokenExpiry(i int64) *UserUpdateOne {
	uuo.mutation.AddRefreshTokenExpiry(i)
	return uuo
}

// ClearRefreshTokenExpiry clears the value of the "refresh_token_expiry" field.
func (uuo *UserUpdateOne) ClearRefreshTokenExpiry() *UserUpdateOne {
	uuo.mutation.ClearRefreshTokenExpiry()
	return uuo
}

// AddUnrecivedMessageIDs adds the "unrecived_messages" edge to the Message entity by IDs.
func (uuo *UserUpdateOne) AddUnrecivedMessageIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddUnrecivedMessageIDs(ids...)
	return uuo
}

// AddUnrecivedMessages adds the "unrecived_messages" edges to the Message entity.
func (uuo *UserUpdateOne) AddUnrecivedMessages(m ...*Message) *UserUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.AddUnrecivedMessageIDs(ids...)
}

// AddUndeliveredMessageIDs adds the "undelivered_messages" edge to the Message entity by IDs.
func (uuo *UserUpdateOne) AddUndeliveredMessageIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddUndeliveredMessageIDs(ids...)
	return uuo
}

// AddUndeliveredMessages adds the "undelivered_messages" edges to the Message entity.
func (uuo *UserUpdateOne) AddUndeliveredMessages(m ...*Message) *UserUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.AddUndeliveredMessageIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearUnrecivedMessages clears all "unrecived_messages" edges to the Message entity.
func (uuo *UserUpdateOne) ClearUnrecivedMessages() *UserUpdateOne {
	uuo.mutation.ClearUnrecivedMessages()
	return uuo
}

// RemoveUnrecivedMessageIDs removes the "unrecived_messages" edge to Message entities by IDs.
func (uuo *UserUpdateOne) RemoveUnrecivedMessageIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveUnrecivedMessageIDs(ids...)
	return uuo
}

// RemoveUnrecivedMessages removes "unrecived_messages" edges to Message entities.
func (uuo *UserUpdateOne) RemoveUnrecivedMessages(m ...*Message) *UserUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.RemoveUnrecivedMessageIDs(ids...)
}

// ClearUndeliveredMessages clears all "undelivered_messages" edges to the Message entity.
func (uuo *UserUpdateOne) ClearUndeliveredMessages() *UserUpdateOne {
	uuo.mutation.ClearUndeliveredMessages()
	return uuo
}

// RemoveUndeliveredMessageIDs removes the "undelivered_messages" edge to Message entities by IDs.
func (uuo *UserUpdateOne) RemoveUndeliveredMessageIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveUndeliveredMessageIDs(ids...)
	return uuo
}

// RemoveUndeliveredMessages removes "undelivered_messages" edges to Message entities.
func (uuo *UserUpdateOne) RemoveUndeliveredMessages(m ...*Message) *UserUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.RemoveUndeliveredMessageIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	var (
		err  error
		node *User
	)
	if len(uuo.hooks) == 0 {
		if err = uuo.check(); err != nil {
			return nil, err
		}
		node, err = uuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uuo.check(); err != nil {
				return nil, err
			}
			uuo.mutation = mutation
			node, err = uuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uuo.hooks) - 1; i >= 0; i-- {
			if uuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf("ent: validator failed for field \"username\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.PasswordHash(); ok {
		if err := user.PasswordHashValidator(v); err != nil {
			return &ValidationError{Name: "password_hash", err: fmt.Errorf("ent: validator failed for field \"password_hash\": %w", err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing User.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldUsername,
		})
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldName,
		})
	}
	if value, ok := uuo.mutation.PasswordHash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPasswordHash,
		})
	}
	if value, ok := uuo.mutation.Bio(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldBio,
		})
	}
	if uuo.mutation.BioCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldBio,
		})
	}
	if value, ok := uuo.mutation.LastSeen(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldLastSeen,
		})
	}
	if uuo.mutation.LastSeenCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: user.FieldLastSeen,
		})
	}
	if value, ok := uuo.mutation.RefreshTokenExpiry(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldRefreshTokenExpiry,
		})
	}
	if value, ok := uuo.mutation.AddedRefreshTokenExpiry(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldRefreshTokenExpiry,
		})
	}
	if uuo.mutation.RefreshTokenExpiryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: user.FieldRefreshTokenExpiry,
		})
	}
	if uuo.mutation.UnrecivedMessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.UnrecivedMessagesTable,
			Columns: user.UnrecivedMessagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUnrecivedMessagesIDs(); len(nodes) > 0 && !uuo.mutation.UnrecivedMessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.UnrecivedMessagesTable,
			Columns: user.UnrecivedMessagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UnrecivedMessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.UnrecivedMessagesTable,
			Columns: user.UnrecivedMessagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UndeliveredMessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UndeliveredMessagesTable,
			Columns: []string{user.UndeliveredMessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUndeliveredMessagesIDs(); len(nodes) > 0 && !uuo.mutation.UndeliveredMessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UndeliveredMessagesTable,
			Columns: []string{user.UndeliveredMessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UndeliveredMessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UndeliveredMessagesTable,
			Columns: []string{user.UndeliveredMessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
