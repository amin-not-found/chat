// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"server/ent/message"
	"server/ent/user"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Message is the model entity for the Message schema.
type Message struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Time holds the value of the "time" field.
	Time time.Time `json:"time,omitempty"`
	// LocalID holds the value of the "local_id" field.
	LocalID int64 `json:"local_id,omitempty"`
	// CanBeDeleted holds the value of the "can_be_deleted" field.
	CanBeDeleted bool `json:"can_be_deleted,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MessageQuery when eager-loading is set.
	Edges                     MessageEdges `json:"edges"`
	user_undelivered_messages *int
}

// MessageEdges holds the relations/edges for other nodes in the graph.
type MessageEdges struct {
	// Receivers holds the value of the receivers edge.
	Receivers []*User `json:"receivers,omitempty"`
	// Sender holds the value of the sender edge.
	Sender *User `json:"sender,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ReceiversOrErr returns the Receivers value or an error if the edge
// was not loaded in eager-loading.
func (e MessageEdges) ReceiversOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Receivers, nil
	}
	return nil, &NotLoadedError{edge: "receivers"}
}

// SenderOrErr returns the Sender value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageEdges) SenderOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.Sender == nil {
			// The edge sender was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Sender, nil
	}
	return nil, &NotLoadedError{edge: "sender"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Message) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case message.FieldCanBeDeleted:
			values[i] = new(sql.NullBool)
		case message.FieldID, message.FieldLocalID:
			values[i] = new(sql.NullInt64)
		case message.FieldType, message.FieldContent:
			values[i] = new(sql.NullString)
		case message.FieldTime:
			values[i] = new(sql.NullTime)
		case message.ForeignKeys[0]: // user_undelivered_messages
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Message", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Message fields.
func (m *Message) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case message.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case message.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				m.Type = value.String
			}
		case message.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				m.Content = value.String
			}
		case message.FieldTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				m.Time = value.Time
			}
		case message.FieldLocalID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field local_id", values[i])
			} else if value.Valid {
				m.LocalID = value.Int64
			}
		case message.FieldCanBeDeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field can_be_deleted", values[i])
			} else if value.Valid {
				m.CanBeDeleted = value.Bool
			}
		case message.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_undelivered_messages", value)
			} else if value.Valid {
				m.user_undelivered_messages = new(int)
				*m.user_undelivered_messages = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryReceivers queries the "receivers" edge of the Message entity.
func (m *Message) QueryReceivers() *UserQuery {
	return (&MessageClient{config: m.config}).QueryReceivers(m)
}

// QuerySender queries the "sender" edge of the Message entity.
func (m *Message) QuerySender() *UserQuery {
	return (&MessageClient{config: m.config}).QuerySender(m)
}

// Update returns a builder for updating this Message.
// Note that you need to call Message.Unwrap() before calling this method if this Message
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Message) Update() *MessageUpdateOne {
	return (&MessageClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the Message entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Message) Unwrap() *Message {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Message is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Message) String() string {
	var builder strings.Builder
	builder.WriteString("Message(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", type=")
	builder.WriteString(m.Type)
	builder.WriteString(", content=")
	builder.WriteString(m.Content)
	builder.WriteString(", time=")
	builder.WriteString(m.Time.Format(time.ANSIC))
	builder.WriteString(", local_id=")
	builder.WriteString(fmt.Sprintf("%v", m.LocalID))
	builder.WriteString(", can_be_deleted=")
	builder.WriteString(fmt.Sprintf("%v", m.CanBeDeleted))
	builder.WriteByte(')')
	return builder.String()
}

// Messages is a parsable slice of Message.
type Messages []*Message

func (m Messages) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
